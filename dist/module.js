$traceurRuntime.options.symbols = true;
System.registerModule("src/leonardo/activator.drv.js", [], function() {
  "use strict";
  var __moduleName = "src/leonardo/activator.drv.js";
  function activatorDirective($compile) {
    return {
      restrict: 'A',
      link: function(scope, elem) {
        var el = angular.element('<div ng-click="activate()" class="leonardo-activator"></div>');
        var win = angular.element(['<div class="leonardo-window">', '<div class="leonardo-header">Leonardo Configuration</div>', '<window-body></window-body>', '</div>', '</div>'].join(''));
        $compile(el)(scope);
        $compile(win)(scope);
        elem.append(el);
        elem.append(win);
        win[0].addEventListener('webkitTransitionEnd', function() {
          if (!document.body.classList.contains('pull-top')) {
            document.body.classList.add("pull-top-closed");
          }
        }, false);
        scope.activate = function() {
          if (!document.body.classList.contains('pull-top')) {
            document.body.classList.add('pull-top');
            document.body.classList.remove('pull-top-closed');
          } else {
            document.body.classList.remove('pull-top');
          }
        };
      }
    };
  }
  var $__default = activatorDirective;
  return {get default() {
      return $__default;
    }};
});
$traceurRuntime.options.symbols = true;
System.registerModule("src/leonardo/configuration.srv.js", [], function() {
  "use strict";
  var __moduleName = "src/leonardo/configuration.srv.js";
  function configurationService($q, activeStatesStore, $httpBackend) {
    var states = [];
    var stateReq = {};
    var upsertOption = function(state, name, active) {
      var _states = getStatesFromStore();
      _states[$traceurRuntime.toProperty(state)] = {
        name: name,
        active: active
      };
      activeStatesStore.set('states', _states);
      return sync();
    };
    function getStatesFromStore() {
      return activeStatesStore.get('states') || {};
    }
    function fetchStates() {
      var activeStates = getStatesFromStore();
      var _states = states.map((function(state) {
        return angular.copy(state);
      }));
      _states.forEach(function(state) {
        var option = activeStates[$traceurRuntime.toProperty(state.name)];
        state.active = !!option && option.active;
        state.activeOption = !!option ? state.options.find((function(_option) {
          return _option.name === option.name;
        })) : state.options[0];
      });
      return _states;
    }
    function deactivateAll() {
      var _states = getStatesFromStore();
      Object.keys(_states).forEach(function(stateKey) {
        _states[$traceurRuntime.toProperty(stateKey)].active = false;
      });
      activeStatesStore.set('states', _states);
      return sync();
    }
    function findStateOption(name) {
      return fetchStates().find((function(state) {
        return state.name === name;
      })).activeOption;
    }
    function sync() {
      fetchStates().forEach(function(state) {
        var option = findStateOption(state.name);
        if (state.active) {
          stateReq[$traceurRuntime.toProperty(state.name)].respond(function() {
            $httpBackend.delay = option.delay;
            return [option.status, option.data];
          });
        } else {
          stateReq[$traceurRuntime.toProperty(state.name)].passThrough();
        }
      });
    }
    return {
      states: states,
      initialize: function() {
        (fetchStates() || []).forEach(function(state) {
          stateReq[$traceurRuntime.toProperty(state.name)] = $httpBackend.when(state.verb || 'GET', new RegExp(state.url));
        });
        sync();
      },
      active_states_option: [],
      upsertOption: upsertOption,
      fetchStates: fetchStates,
      getState: function(name) {
        var state = fetchStates().find((function(state) {
          return state.name === name;
        }));
        return (state && state.active && findStateOption(name)) || null;
      },
      addState: function(stateObj) {
        var $__0 = this;
        stateObj.options.forEach((function(option) {
          $__0.upsert({
            state: stateObj.name,
            url: stateObj.url,
            verb: option.verb,
            name: option.name,
            status: option.status,
            data: option.data,
            delay: option.delay
          });
        }));
      },
      addStates: function(statesArr) {
        var $__0 = this;
        statesArr.forEach((function(stateObj) {
          $__0.addState(stateObj);
        }));
      },
      upsert: function($__1) {
        var $__3,
            $__4,
            $__5;
        var $__2 = $__1,
            verb = $__2.verb,
            state = $__2.state,
            name = $__2.name,
            url = $__2.url,
            status = ($__3 = $__2.status) === void 0 ? 200 : $__3,
            data = ($__4 = $__2.data) === void 0 ? {} : $__4,
            delay = ($__5 = $__2.delay) === void 0 ? 0 : $__5;
        var defaultState = {};
        var defaultOption = {};
        if (!state) {
          console.log("cannot upsert - state is mandatory");
          return ;
        }
        var stateItem = states.find((function(_state) {
          return _state.name === state;
        })) || defaultState;
        angular.extend(stateItem, {
          name: state,
          url: url || stateItem.url,
          verb: verb || stateItem.verb,
          options: stateItem.options || []
        });
        if (stateItem === defaultState) {
          states.push(stateItem);
        }
        var option = stateItem.options.find((function(_option) {
          return _option.name === name;
        })) || defaultOption;
        angular.extend(option, {
          name: name,
          status: status,
          data: data,
          delay: delay
        });
        if (option === defaultOption) {
          stateItem.options.push(option);
        }
      },
      upsertMany: function(items) {
        var $__0 = this;
        items.forEach((function(item) {
          return $__0.upsert(item);
        }));
      },
      deactivateAll: deactivateAll
    };
  }
  var $__default = configurationService;
  return {get default() {
      return $__default;
    }};
});
$traceurRuntime.options.symbols = true;
System.registerModule("src/leonardo/window-body.drv.js", [], function() {
  "use strict";
  var __moduleName = "src/leonardo/window-body.drv.js";
  function windowBodyDirective($http, configuration) {
    return {
      restrict: 'E',
      templateUrl: 'window-body.html',
      scope: true,
      replace: true,
      controller: function($scope) {
        $scope.selectedItem = 'activate';
        $scope.NothasUrl = function(option) {
          return !option.url;
        };
        $scope.hasUrl = function(option) {
          return !!option.url;
        };
        $scope.deactivate = function() {
          $scope.states.forEach(function(state) {
            state.active = false;
          });
          configuration.deactivateAll();
        };
        $scope.updateState = function(state) {
          console.log(("update state: " + state.name + " " + state.activeOption.name + " " + state.active));
          configuration.upsertOption(state.name, state.activeOption.name, state.active);
        };
        $scope.states = configuration.fetchStates();
      },
      link: function(scope) {
        scope.test = {
          url: '',
          value: undefined
        };
        scope.submit = function(url) {
          scope.test.value = undefined;
          scope.url = url;
          if (url) {
            $http.get(url).success(function(res) {
              scope.test.value = res;
            });
          }
        };
      }
    };
  }
  var $__default = windowBodyDirective;
  return {get default() {
      return $__default;
    }};
});
$traceurRuntime.options.symbols = true;
System.registerModule("src/leonardo/module.js", [], function() {
  "use strict";
  var __moduleName = "src/leonardo/module.js";
  var activatorDirective = System.get("src/leonardo/activator.drv.js").default;
  var configurationService = System.get("src/leonardo/configuration.srv.js").default;
  var windowBodyDirective = System.get("src/leonardo/window-body.drv.js").default;
  var $__default = angular.module('leonardo', ['leonardo.templates', 'angular-storage', 'ngMockE2E']).factory('configuration', configurationService).factory('activeStatesStore', function(store) {
    return store.getNamespacedStore('active_states');
  }).directive('activator', activatorDirective).directive('windowBody', windowBodyDirective).config(function($provide) {
    $provide.decorator('$httpBackend', function($delegate) {
      var proxy = function(method, url, data, callback, headers) {
        var interceptor = function() {
          var _this = this,
              _arguments = arguments;
          setTimeout(function() {
            callback.apply(_this, _arguments);
          }, proxy.delay || 0);
          proxy.delay = 0;
        };
        return $delegate.call(this, method, url, data, interceptor, headers);
      };
      for (var key in $delegate)
        if (!$traceurRuntime.isSymbolString(key)) {
          proxy[$traceurRuntime.toProperty(key)] = $delegate[$traceurRuntime.toProperty(key)];
        }
      proxy.setDelay = (function(delay) {
        proxy.delay = delay;
      });
      return proxy;
    });
  });
  return {get default() {
      return $__default;
    }};
});
System.get("src/leonardo/module.js" + '');
//# sourceMappingURL=data:application/json;base64,
