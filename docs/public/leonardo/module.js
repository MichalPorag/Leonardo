$traceurRuntime.options.symbols = true;
var $__src_47_leonardo_47_activator_46_drv_46_js__ = (function() {
  "use strict";
  var __moduleName = "src/leonardo/activator.drv.js";
  function activatorDirective($compile) {
    return {
      restrict: 'A',
      link: function(scope, elem) {
        var el = angular.element('<div ng-click="activate()" class="leonardo-activator"></div>');
        var win = angular.element(['<div class="leonardo-window">', '<div class="leonardo-header">Leonardo Configuration</div>', '<window-body></window-body>', '</div>', '</div>'].join(''));
        $compile(el)(scope);
        $compile(win)(scope);
        elem.append(el);
        elem.append(win);
        win[0].addEventListener('webkitTransitionEnd', function() {
          if (!document.body.classList.contains('pull-top')) {
            document.body.classList.add("pull-top-closed");
          }
        }, false);
        scope.activate = function() {
          if (!document.body.classList.contains('pull-top')) {
            document.body.classList.add('pull-top');
            document.body.classList.remove('pull-top-closed');
          } else {
            document.body.classList.remove('pull-top');
          }
        };
      }
    };
  }
  var $__default = activatorDirective;
  return {get default() {
      return $__default;
    }};
})();
$traceurRuntime.options.symbols = true;
var $__src_47_leonardo_47_configuration_46_srv_46_js__ = (function() {
  "use strict";
  var __moduleName = "src/leonardo/configuration.srv.js";
  function configurationService(storage, $httpBackend) {
    var states = [];
    var responseHandlers = {};
    var upsertOption = function(state, name, active) {
      var _states = storage.getStates();
      _states[$traceurRuntime.toProperty(state)] = {
        name: name,
        active: active
      };
      storage.setStates(_states);
      sync();
    };
    function fetchStates() {
      var activeStates = storage.getStates();
      var _states = states.map(function(state) {
        return angular.copy(state);
      });
      _states.forEach(function(state) {
        var option = activeStates[$traceurRuntime.toProperty(state.name)];
        state.active = !!option && option.active;
        state.activeOption = !!option ? state.options.find(function(_option) {
          return _option.name === option.name;
        }) : state.options[0];
      });
      return _states;
    }
    function deactivateAll() {
      var _states = storage.getStates();
      Object.keys(_states).forEach(function(stateKey) {
        _states[$traceurRuntime.toProperty(stateKey)].active = false;
      });
      storage.setStates(_states);
      sync();
    }
    function findStateOption(name) {
      return fetchStates().find(function(state) {
        return state.name === name;
      }).activeOption;
    }
    function sync() {
      fetchStates().forEach(function(state) {
        var option,
            responseHandler;
        if (state.url) {
          option = findStateOption(state.name);
          responseHandler = getResponseHandler(state);
          if (state.active) {
            responseHandler.respond(function() {
              $httpBackend.setDelay(option.delay);
              return [option.status, angular.isFunction(option.data) ? option.data() : option.data];
            });
          } else {
            responseHandler.passThrough();
          }
        }
      });
    }
    function getResponseHandler(state) {
      if (!responseHandlers[$traceurRuntime.toProperty(state.name)]) {
        responseHandlers[$traceurRuntime.toProperty(state.name)] = $httpBackend.when(state.verb || 'GET', new RegExp(state.url));
      }
      return responseHandlers[$traceurRuntime.toProperty(state.name)];
    }
    return {
      states: states,
      active_states_option: [],
      upsertOption: upsertOption,
      fetchStates: fetchStates,
      getState: function(name) {
        var state = fetchStates().find(function(state) {
          return state.name === name;
        });
        return (state && state.active && findStateOption(name)) || null;
      },
      addState: function(stateObj) {
        var $__1 = this;
        stateObj.options.forEach(function(option) {
          $__1.upsert({
            state: stateObj.name,
            url: stateObj.url,
            verb: option.verb,
            name: option.name,
            status: option.status,
            data: option.data,
            delay: option.delay
          });
        });
      },
      addStates: function(statesArr) {
        var $__1 = this;
        statesArr.forEach(function(stateObj) {
          $__1.addState(stateObj);
        });
      },
      upsert: function($__2) {
        var $__4,
            $__5,
            $__6;
        var $__3 = $__2,
            verb = $__3.verb,
            state = $__3.state,
            name = $__3.name,
            url = $__3.url,
            status = ($__4 = $__3.status) === void 0 ? 200 : $__4,
            data = ($__5 = $__3.data) === void 0 ? {} : $__5,
            delay = ($__6 = $__3.delay) === void 0 ? 0 : $__6;
        var defaultState = {};
        var defaultOption = {};
        if (!state) {
          console.log("cannot upsert - state is mandatory");
          return;
        }
        var stateItem = states.find(function(_state) {
          return _state.name === state;
        }) || defaultState;
        angular.extend(stateItem, {
          name: state,
          url: url || stateItem.url,
          verb: verb || stateItem.verb,
          options: stateItem.options || []
        });
        if (stateItem === defaultState) {
          states.push(stateItem);
        }
        var option = stateItem.options.find(function(_option) {
          return _option.name === name;
        }) || defaultOption;
        angular.extend(option, {
          name: name,
          status: status,
          data: data,
          delay: delay
        });
        if (option === defaultOption) {
          stateItem.options.push(option);
        }
        sync();
      },
      upsertMany: function(items) {
        var $__1 = this;
        items.forEach(function(item) {
          return $__1.upsert(item);
        });
      },
      deactivateAll: deactivateAll
    };
  }
  var $__default = configurationService;
  return {get default() {
      return $__default;
    }};
})();
$traceurRuntime.options.symbols = true;
var $__src_47_leonardo_47_storage_46_srv_46_js__ = (function() {
  "use strict";
  var __moduleName = "src/leonardo/storage.srv.js";
  function storageService() {
    var STATES_STORE_KEY = 'states';
    function getItem(key) {
      var item = localStorage.getItem(key);
      if (!item) {
        return null;
      }
      return angular.fromJson(item);
    }
    function setItem(key, data) {
      localStorage.setItem(key, angular.toJson(data));
    }
    function getStates() {
      return getItem(STATES_STORE_KEY) || {};
    }
    function setStates(states) {
      setItem(STATES_STORE_KEY, states);
    }
    return {
      getItem: getItem,
      setItem: setItem,
      setStates: setStates,
      getStates: getStates
    };
  }
  var $__default = storageService;
  return {get default() {
      return $__default;
    }};
})();
$traceurRuntime.options.symbols = true;
var $__src_47_leonardo_47_window_45_body_46_drv_46_js__ = (function() {
  "use strict";
  var __moduleName = "src/leonardo/window-body.drv.js";
  function windowBodyDirective($http, configuration) {
    return {
      restrict: 'E',
      templateUrl: 'window-body.html',
      scope: true,
      replace: true,
      controller: function($scope) {
        $scope.selectedItem = 'activate';
        $scope.NothasUrl = function(option) {
          return !option.url;
        };
        $scope.hasUrl = function(option) {
          return !!option.url;
        };
        $scope.deactivate = function() {
          $scope.states.forEach(function(state) {
            state.active = false;
          });
          configuration.deactivateAll();
        };
        $scope.updateState = function(state) {
          console.log(("update state: " + state.name + " " + state.activeOption.name + " " + state.active));
          configuration.upsertOption(state.name, state.activeOption.name, state.active);
        };
        $scope.states = configuration.fetchStates();
      },
      link: function(scope) {
        scope.test = {
          url: '',
          value: undefined
        };
        scope.submit = function(url) {
          scope.test.value = undefined;
          scope.url = url;
          if (url) {
            $http.get(url).success(function(res) {
              scope.test.value = res;
            });
          }
        };
      }
    };
  }
  var $__default = windowBodyDirective;
  return {get default() {
      return $__default;
    }};
})();
$traceurRuntime.options.symbols = true;
var $__src_47_leonardo_47_module_46_js__ = (function() {
  "use strict";
  var __moduleName = "src/leonardo/module.js";
  var activatorDirective = ($__src_47_leonardo_47_activator_46_drv_46_js__).default;
  var configurationService = ($__src_47_leonardo_47_configuration_46_srv_46_js__).default;
  var storageService = ($__src_47_leonardo_47_storage_46_srv_46_js__).default;
  var windowBodyDirective = ($__src_47_leonardo_47_window_45_body_46_drv_46_js__).default;
  var $__default = angular.module('leonardo', ['leonardo.templates', 'ngMockE2E']).factory('storage', storageService).factory('configuration', configurationService).directive('activator', activatorDirective).directive('windowBody', windowBodyDirective).config(function($provide) {
    $provide.decorator('$httpBackend', function($delegate) {
      var proxy = function(method, url, data, callback, headers) {
        var interceptor = function() {
          var _this = this,
              _arguments = arguments;
          setTimeout(function() {
            callback.apply(_this, _arguments);
          }, proxy.delay || 0);
          proxy.delay = 0;
        };
        return $delegate.call(this, method, url, data, interceptor, headers);
      };
      for (var key in $delegate)
        if (!$traceurRuntime.isSymbolString(key)) {
          proxy[$traceurRuntime.toProperty(key)] = $delegate[$traceurRuntime.toProperty(key)];
        }
      proxy.setDelay = function(delay) {
        proxy.delay = delay;
      };
      return proxy;
    });
  });
  return {get default() {
      return $__default;
    }};
})();
//# sourceMappingURL=data:application/json;base64,
