$traceurRuntime.options.symbols = true;
System.registerModule("../../../index.js", [], function() {
  "use strict";
  var __moduleName = "../../../index.js";
  var $__default = angular.module('example', ['leonardo']).run(run);
  function run(configuration, $httpBackend) {
    debugger;
    configuration.upsert({
      state: 'state1',
      name: 'get url1 aaaa',
      url: 'http://url1.com',
      status: 200,
      data: ["url1 aaa"]
    });
    configuration.upsertMany([{
      state: 'state1',
      name: 'get url1 bbbb',
      status: 200,
      data: ["url1 bbb"]
    }, {
      url: 'http://url1.com',
      name: 'get url1 cccc',
      status: 200,
      data: ["url1 ccc"]
    }, {
      url: 'http://url2.com',
      name: 'get url2 a',
      status: 200,
      data: ["url2 aaa"]
    }, {
      url: 'http://url2.com',
      name: 'get url2 b',
      status: 200,
      data: ["url2 bbb"]
    }]);
    configuration.getActiveStateOptions().then(function(rows) {
      var activeStates = {};
      for (var i = 0; i < rows.length; i++) {
        activeStates[$traceurRuntime.toProperty(rows.item(i).state)] = {
          name: rows.item(i).name,
          active: (rows.item(i).active === "true")
        };
      }
      var states = configuration.states.map((function(state) {
        return angular.copy(state);
      }));
      states.forEach(function(state) {
        var option = activeStates[$traceurRuntime.toProperty(state.name)];
        state.active = !!option && option.active;
        state.activeOption = !!option ? state.options.find((function(_option) {
          return _option.name === option.name;
        })) : state.options[0];
      });
      states.filter((function(state) {
        return state.active;
      })).forEach(function(state) {
        var option = state.activeOption;
        $httpBackend.when('GET', state.url).respond(option.status, option.data);
      });
    });
  }
  return {get default() {
      return $__default;
    }};
});
System.get("../../../index.js" + '');

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8wIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzYiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci80IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzEiLCIuLi8uLi8uLi9pbmRleC5qcyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci83IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMiIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci84Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsUUFBUSxRQUFRLEVBQUksS0FBRyxDQUFBO0FDQXJDLEtBQUssZUFBZSxBQUFDLHFCQUFvQixHQUFDLENDQTFDLFVBQVMsQUFBRDs7QUNBUixBQUFJLElBQUEsQ0FBQSxZQUFXLHNCQUFvQixDQUFDO0FDQXBDLEFBQUksSUFBQSxDQUFBLFVBQVMsRUNLRSxDQUFBLE9BQU0sT0FBTyxBQUFDLENBQUMsU0FBUSxDQUFHLEVBQUMsVUFBUyxDQUFDLENBQUMsSUFDdEMsQUFBQyxDQUFDLEdBQUUsQ0FBQyxBRE5hLENBQUE7QUNTakMsU0FBUyxJQUFFLENBQUUsYUFBWSxDQUFHLENBQUEsWUFBVztBQU1yQyxZQUFRO0FBQ1IsZ0JBQVksT0FBTyxBQUFDLENBQUM7QUFBRSxVQUFJLENBQUcsU0FBTztBQUFHLFNBQUcsQ0FBRyxnQkFBYztBQUFHLFFBQUUsQ0FBRyxrQkFBZ0I7QUFBRyxXQUFLLENBQUcsSUFBRTtBQUFHLFNBQUcsQ0FBRyxFQUFDLFVBQVMsQ0FBQztBQUFBLElBQUMsQ0FBQyxDQUFDO0FBQ3hILGdCQUFZLFdBQVcsQUFBQyxDQUFDLENBQ3ZCO0FB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QUMsQ0FBQSIsImZpbGUiOiIvVXNlcnMvc2ZyYW5rZWwvZGV2L291dGJyYWluL0xlb25hcmRvL2RvY3MvcHVibGljL2xlb25hcmRvL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJHRyYWNldXJSdW50aW1lLm9wdGlvbnMuc3ltYm9scyA9IHRydWUiLCJTeXN0ZW0ucmVnaXN0ZXJNb2R1bGUoJF9fcGxhY2Vob2xkZXJfXzAsIFtdLCAkX19wbGFjZWhvbGRlcl9fMSk7IiwiZnVuY3Rpb24oKSB7XG4gICAgICAgICRfX3BsYWNlaG9sZGVyX18wXG4gICAgICB9IiwidmFyIF9fbW9kdWxlTmFtZSA9ICRfX3BsYWNlaG9sZGVyX18wOyIsInZhciAkX19kZWZhdWx0ID0gJF9fcGxhY2Vob2xkZXJfXzAiLG51bGwsIiRfX3BsYWNlaG9sZGVyX18wWyR0cmFjZXVyUnVudGltZS50b1Byb3BlcnR5KCRfX3BsYWNlaG9sZGVyX18xKV0iLCJyZXR1cm4gJF9fcGxhY2Vob2xkZXJfXzAiLCJnZXQgJF9fcGxhY2Vob2xkZXJfXzAoKSB7IHJldHVybiAkX19wbGFjZWhvbGRlcl9fMTsgfSIsIlN5c3RlbS5nZXQoJF9fcGxhY2Vob2xkZXJfXzAgKycnKSJdfQ==
