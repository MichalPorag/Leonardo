$traceurRuntime.options.symbols = true;
System.registerModule("index.js", [], function() {
  "use strict";
  var __moduleName = "index.js";
  var $__default = angular.module('example', ['leonardo']).run(run);
  function run($rootScope, configuration) {
    configuration.addStates([{
      name: 'state_animals_non_ajax',
      options: [{
        name: 'get kittens',
        data: ["persion", "siemi"]
      }, {
        name: 'get dogs',
        data: ["labrador"]
      }]
    }, {
      name: 'state1',
      url: 'http://url1.com',
      options: [{
        name: 'get url1 aaaa',
        status: 200,
        data: ["url1 aaa"]
      }, {
        name: 'get url1 bbbb',
        status: 200,
        data: ["url1 bbb"]
      }, {
        name: 'get url1 cccc',
        status: 200,
        data: ["url1 ccc"]
      }]
    }, {
      name: "state2",
      url: 'http://url2.com',
      options: [{
        name: 'get url2 bbbb',
        status: 404,
        data: ["url2 404 failure"],
        delay: 2000
      }]
    }, {
      name: "state3",
      url: 'http://url3.com',
      options: [{
        name: 'get url3 bbbb',
        status: 200,
        data: ["url3 bbb"]
      }]
    }, {
      name: "state 4",
      options: [{
        name: 'get url4 bbbb',
        data: ["url4 bbb"]
      }]
    }]);
    configuration.initialize();
    $rootScope.showAnimals = function() {
      var option = configuration.getState("state_animals_non_ajax");
      alert(option ? option.data : 'No Active');
    };
  }
  return {get default() {
      return $__default;
    }};
});
System.get("index.js" + '');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBLGMsUSxRLEUsSyxDO0EsSyxlLEEsWSxHLEMsVSxBOztBLEEsSSxDLFksYSxDO0EsQSxJLEMsVSxFQUtlLENBQUEsT0FBTSxPQUFPLEFBQUMsQ0FBQyxTQUFRLENBQUcsRUFBQyxVQUFTLENBQUMsQ0FBQyxJQUN0QyxBQUFDLENBQUMsR0FBRSxDQUFDLEFBTmEsQ0FBQTtBQVNqQyxTQUFTLElBQUUsQ0FBRSxVQUFTLENBQUcsQ0FBQSxhQUFZLENBQUU7QUFtQnJDLGdCQUFZLFVBQVUsQUFBQyxDQUFDLENBQ3RCO0FBQ0UsU0FBRyxDQUFHLHlCQUF1QjtBQUM3QixZQUFNLENBQUcsRUFDUDtBQUFDLFdBQUcsQ0FBRyxjQUFZO0FBQUcsV0FBRyxDQUFHLEVBQUMsU0FBUSxDQUFHLFFBQU0sQ0FBQztBQUFBLE1BQUMsQ0FDaEQ7QUFBQyxXQUFHLENBQUcsV0FBUztBQUFHLFdBQUcsQ0FBRyxFQUFDLFVBQVMsQ0FBQztBQUFBLE1BQUMsQ0FDdkM7QUFBQSxJQUNGLENBQ0E7QUFDRSxTQUFHLENBQUcsU0FBTztBQUNiLFFBQUUsQ0FBRyxrQkFBZ0I7QUFDckIsWUFBTSxDQUFHLEVBQ1A7QUFBQyxXQUFHLENBQUcsZ0JBQWM7QUFBRyxhQUFLLENBQUcsSUFBRTtBQUFHLFdBQUcsQ0FBRyxFQUFDLFVBQVMsQ0FBQztBQUFBLE1BQUMsQ0FDdkQ7QUFBQyxXQUFHLENBQUcsZ0JBQWM7QUFBRyxhQUFLLENBQUcsSUFBRTtBQUFJLFdBQUcsQ0FBRyxFQUFDLFVBQVMsQ0FBQztBQUFBLE1BQUMsQ0FDeEQ7QUFBQyxXQUFHLENBQUcsZ0JBQWM7QUFBRyxhQUFLLENBQUcsSUFBRTtBQUFJLFdBQUcsQ0FBRyxFQUFDLFVBQVMsQ0FBQztBQUFBLE1BQUMsQ0FDMUQ7QUFBQSxJQUNGLENBQ0E7QUFDRSxTQUFHLENBQUcsU0FBTztBQUNiLFFBQUUsQ0FBRyxrQkFBZ0I7QUFDckIsWUFBTSxDQUFHLEVBQ1A7QUFBQyxXQUFHLENBQUcsZ0JBQWM7QUFBRyxhQUFLLENBQUcsSUFBRTtBQUFJLFdBQUcsQ0FBRyxFQUFDLGtCQUFpQixDQUFDO0FBQUcsWUFBSSxDQUFHLEtBQUc7QUFBQSxNQUFDLENBQy9FO0FBQUEsSUFDRixDQUNBO0FBQ0UsU0FBRyxDQUFHLFNBQU87QUFDYixRQUFFLENBQUcsa0JBQWdCO0FBQ3JCLFlBQU0sQ0FBRyxFQUNQO0FBQUMsV0FBRyxDQUFHLGdCQUFjO0FBQUcsYUFBSyxDQUFHLElBQUU7QUFBSSxXQUFHLENBQUcsRUFBQyxVQUFTLENBQUM7QUFBQSxNQUFDLENBQzFEO0FBQUEsSUFDRixDQUNBO0FBQ0UsU0FBRyxDQUFHLFVBQVE7QUFDZCxZQUFNLENBQUcsRUFDUDtBQUFDLFdBQUcsQ0FBRyxnQkFBYztBQUFHLFdBQUcsQ0FBRyxFQUFDLFVBQVMsQ0FBQztBQUFBLE1BQUMsQ0FDNUM7QUFBQSxJQUNGLENBQ0YsQ0FBQyxDQUFDO0FBUUYsZ0JBQVksV0FBVyxBQUFDLEVBQUMsQ0FBQztBQUUxQixhQUFTLFlBQVksRUFBSSxVQUFTLEFBQUQsQ0FBRTtBQUNqQyxBQUFJLFFBQUEsQ0FBQSxNQUFLLEVBQUksQ0FBQSxhQUFZLFNBQVMsQUFBQyxDQUFDLHdCQUF1QixDQUFDLENBQUM7QUFDN0QsVUFBSSxBQUFDLENBQUMsTUFBSyxFQUFJLENBQUEsTUFBSyxLQUFLLEVBQUksWUFBVSxDQUFFLENBQUM7SUFDNUMsQ0FBQztFQUNIO0FBQUEsQUEvRUEsU0FBQSxhQUF3QjtBQUFFLHVCQUF3QjtJQUFFLEVBQTdCO0FBRWpCLENBRndELENBQUM7QUFBL0QsS0FBSyxJQUFJLEFBQUMsQ0FBQyxZQUFtQixHQUFDLENBQUMsQ0FBQSIsImZpbGUiOiIvVXNlcnMvdHNodXNoYW4vZGV2L0xlb25hcmRvL3RlbXBvdXRNQzQwTmpNMk9UVTNNRGN5TmpVeU9EYzJOQXJlZHJlZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gU3RlcHMgU3RhZ2VzXG4vLyAtLS0tLS0tLS0tLS0tLS0tXG4vLyogQWRkIGxlb25hcmRvIG1vZHVsZSBhcyBhIGRlcGVuZGFuY3kgdG8geW91ciBhcHBcbi8vKiBZb3UgZG9uZSFcbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXIubW9kdWxlKCdleGFtcGxlJywgWydsZW9uYXJkbyddKVxuICAgICAgICAgICAgLnJ1bihydW4pO1xuXG4vL3dlbGwgYWxtb3N0Li4uXG5mdW5jdGlvbiBydW4oJHJvb3RTY29wZSwgY29uZmlndXJhdGlvbil7XG5cbiAgLy8gQWRkaW5nIHN0YXRlc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tXG4gIC8vKiB2aWEgYXBpIC0geW91IGNhbiBsb29rIGF0IHRoZSByZXN1bHRzIGJ5IGNsaWNraW5nIGxlb25hcmRvIGFuZCBsb29raW5nIGluIHRoZSBjb25maWd1cmUgdGFiXG4gIC8vKiB2aWEgdWkgLSBjb21pbmcgc29vbi4uLlxuICAvKlxuICBjb25maWd1cmF0aW9uLnVwc2VydCh7IHN0YXRlOiAnc3RhdGUxJywgbmFtZTogJ2dldCB1cmwxIGFhYWEnLCB1cmw6ICdodHRwOi8vdXJsMS5jb20nLCBzdGF0dXM6IDIwMCwgZGF0YTogW1widXJsMSBhYWFcIl19KTtcbiAgY29uZmlndXJhdGlvbi51cHNlcnRNYW55KFtcbiAgICB7IHN0YXRlOiAnc3RhdGVfYW5pbWFsc19ub25fYWpheCcsIG5hbWU6ICdnZXQga2l0dGVucycsIGRhdGE6IFtcInBlcnNpb25cIiwgXCJzaWVtaVwiXX0sXG4gICAgeyBzdGF0ZTogJ3N0YXRlX2FuaW1hbHNfbm9uX2FqYXgnLCBuYW1lOiAnZ2V0IGRvZ3MnLCBkYXRhOiBbXCJsYWJyYWRvclwiXX0sXG4gICAgeyBzdGF0ZTogJ3N0YXRlMScsIG5hbWU6ICdnZXQgdXJsMSBiYmJiJywgc3RhdHVzOjIwMCwgIGRhdGE6IFtcInVybDEgYmJiXCJdfSxcbiAgICB7IHN0YXRlOiAnc3RhdGUxJywgdXJsOiAnaHR0cDovL3VybDMuY29tJywgbmFtZTogJ2dldCB1cmwzIGJiYmInLCBzdGF0dXM6MjAwLCAgZGF0YTogW1widXJsMyBiYmJcIl0sIGRlbGF5OiAyMDAwfSxcbiAgICB7IHN0YXRlOiAnc3RhdGUyJywgdXJsOiAnaHR0cDovL3VybDEuY29tJywgbmFtZTogJ2dldCB1cmwxIGNjY2MnLCBzdGF0dXM6MjAwLCAgZGF0YTogW1widXJsMSBjY2NcIl19LFxuICAgIHsgc3RhdGU6ICdzdGF0ZTMnLCB1cmw6ICdodHRwOi8vdXJsMi5jb20nLCBuYW1lOiAnZ2V0IHVybDIgYScsIHN0YXR1czoyMDAsICBkYXRhOiBbXCJ1cmwyIGFhYVwiXX0sXG4gICAgeyBzdGF0ZTogJ3N0YXRlNCcsIHVybDogJ2h0dHA6Ly91cmwyLmNvbScsIG5hbWU6ICdnZXQgdXJsMiBiJywgc3RhdHVzOjIwMCwgIGRhdGE6IFtcInVybDIgYmJiXCJdfVxuICBdKTtcbiAgKi9cblxuICBjb25maWd1cmF0aW9uLmFkZFN0YXRlcyhbXG4gICAge1xuICAgICAgbmFtZTogJ3N0YXRlX2FuaW1hbHNfbm9uX2FqYXgnLFxuICAgICAgb3B0aW9uczogW1xuICAgICAgICB7bmFtZTogJ2dldCBraXR0ZW5zJywgZGF0YTogW1wicGVyc2lvblwiLCBcInNpZW1pXCJdfSxcbiAgICAgICAge25hbWU6ICdnZXQgZG9ncycsIGRhdGE6IFtcImxhYnJhZG9yXCJdfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ3N0YXRlMScsXG4gICAgICB1cmw6ICdodHRwOi8vdXJsMS5jb20nLFxuICAgICAgb3B0aW9uczogW1xuICAgICAgICB7bmFtZTogJ2dldCB1cmwxIGFhYWEnLCBzdGF0dXM6IDIwMCwgZGF0YTogW1widXJsMSBhYWFcIl19LFxuICAgICAgICB7bmFtZTogJ2dldCB1cmwxIGJiYmInLCBzdGF0dXM6IDIwMCwgIGRhdGE6IFtcInVybDEgYmJiXCJdfSxcbiAgICAgICAge25hbWU6ICdnZXQgdXJsMSBjY2NjJywgc3RhdHVzOiAyMDAsICBkYXRhOiBbXCJ1cmwxIGNjY1wiXX1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IFwic3RhdGUyXCIsXG4gICAgICB1cmw6ICdodHRwOi8vdXJsMi5jb20nLFxuICAgICAgb3B0aW9uczogW1xuICAgICAgICB7bmFtZTogJ2dldCB1cmwyIGJiYmInLCBzdGF0dXM6IDQwNCwgIGRhdGE6IFtcInVybDIgNDA0IGZhaWx1cmVcIl0sIGRlbGF5OiAyMDAwfSxcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IFwic3RhdGUzXCIsXG4gICAgICB1cmw6ICdodHRwOi8vdXJsMy5jb20nLFxuICAgICAgb3B0aW9uczogW1xuICAgICAgICB7bmFtZTogJ2dldCB1cmwzIGJiYmInLCBzdGF0dXM6IDIwMCwgIGRhdGE6IFtcInVybDMgYmJiXCJdfSxcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IFwic3RhdGUgNFwiLFxuICAgICAgb3B0aW9uczogW1xuICAgICAgICB7bmFtZTogJ2dldCB1cmw0IGJiYmInLCBkYXRhOiBbXCJ1cmw0IGJiYlwiXX0sXG4gICAgICBdXG4gICAgfVxuICBdKTtcblxuXG4gIC8vIFNldHRpbmcgb3B0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tXG4gIC8vKiB2aWEgdWkgLSBjbGljayBvbiBsZW9uYXJkbyBhbmQgaGl0IHRoZSBhY3RpdmF0ZSB0YWJzXG4gIC8vKiB2aWEgYXBpIC0gY29taW5nIHNvb24uLi5cblxuICBjb25maWd1cmF0aW9uLmluaXRpYWxpemUoKTtcblxuICAkcm9vdFNjb3BlLnNob3dBbmltYWxzID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgb3B0aW9uID0gY29uZmlndXJhdGlvbi5nZXRTdGF0ZShcInN0YXRlX2FuaW1hbHNfbm9uX2FqYXhcIik7XG4gICAgYWxlcnQob3B0aW9uID8gb3B0aW9uLmRhdGEgOiAnTm8gQWN0aXZlJyApO1xuICB9O1xufVxuIl19
